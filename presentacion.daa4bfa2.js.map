{"mappings":"A,S,E,C,C,C,C,C,C,C,C,C,C,C,C,C,E,G,C,I,E,C,C,E,C,G,E,E,K,A,C,M,E,C,E,G,M,C,E,I,C,E,G,Q,O,C,G,I,C,E,E,C,S,E,C,E,O,W,I,E,I,C,E,U,O,I,Q,S,C,C,C,E,I,E,E,K,C,E,G,S,E,C,E,E,E,E,E,E,E,O,E,C,S,E,C,E,E,E,E,E,E,E,Q,E,C,E,K,E,E,C,C,S,E,C,C,C,C,C,E,M,C,E,I,Q,S,C,S,C,C,C,C,C,E,I,E,C,K,C,E,I,C,K,C,E,G,I,E,G,C,S,I,C,K,C,E,E,E,O,G,E,E,E,S,E,C,G,K,C,K,U,C,S,E,C,C,C,E,I,I,E,E,E,E,M,C,I,C,I,E,C,C,E,A,C,E,U,C,E,U,E,C,E,E,Y,C,C,E,U,G,C,E,Q,C,C,C,E,O,c,C,E,E,G,C,E,C,C,S,E,C,E,M,A,C,E,O,c,C,O,c,C,S,C,E,O,E,S,E,O,c,C,E,C,E,E,C,S,E,C,C,C,E,M,A,C,E,O,c,E,S,C,C,C,E,O,E,S,C,E,C,C,E,E,E,C,S,E,C,E,I,E,A,Y,O,I,I,I,K,E,M,A,C,E,S,C,E,G,A,O,G,K,S,Q,C,I,C,G,O,C,iB,O,E,G,A,Y,O,E,M,A,U,sD,G,A,K,I,E,C,G,E,G,C,G,O,E,G,C,G,E,G,C,E,E,C,S,I,O,E,E,U,E,I,E,W,C,C,O,E,S,C,O,M,C,E,S,C,C,Y,C,M,E,W,C,E,S,C,E,a,C,C,C,G,E,E,E,C,E,E,C,S,I,G,a,O,S,C,Q,S,E,Q,S,C,I,C,M,C,E,G,A,Y,O,M,M,C,E,G,C,O,Q,S,C,O,C,I,C,Q,S,C,Q,E,C,W,I,C,C,C,M,E,C,M,C,C,C,C,S,E,C,C,C,E,I,E,E,E,E,E,C,M,E,K,W,G,A,E,C,C,E,C,M,C,C,E,C,O,C,C,E,A,E,K,E,C,I,E,A,E,O,E,C,K,E,G,M,E,G,O,E,E,E,A,Y,O,Q,C,C,C,O,Q,C,C,W,O,I,A,C,E,E,S,E,C,E,O,S,C,E,O,A,S,C,E,G,E,M,A,U,mC,K,G,G,C,G,E,E,G,C,E,A,E,C,C,E,C,E,M,C,C,C,E,C,E,K,E,C,A,C,E,E,M,A,G,E,I,C,G,C,E,E,I,A,G,C,A,C,E,E,I,C,E,C,C,E,C,E,I,C,O,E,O,E,E,A,G,C,E,C,A,E,C,C,E,C,E,K,C,A,E,C,C,E,E,K,E,K,E,E,E,K,M,E,O,E,K,G,C,M,C,C,E,C,K,C,C,C,M,E,E,K,G,E,C,C,E,C,E,C,E,C,Q,M,E,E,E,G,C,G,G,E,I,C,G,G,Q,S,G,C,C,E,A,C,E,E,I,A,E,M,C,G,C,C,E,M,C,E,A,G,C,A,I,C,C,E,E,A,I,C,C,E,A,E,C,E,E,Q,C,G,A,I,C,C,E,E,C,C,G,C,C,E,C,C,C,E,E,C,C,E,C,C,C,E,A,E,C,E,K,C,C,C,E,C,K,C,G,A,I,C,C,E,E,E,K,C,C,C,E,C,C,E,K,C,C,C,E,C,E,E,K,C,G,G,E,K,C,C,C,E,C,C,E,K,C,C,C,E,C,E,G,C,I,C,G,K,C,C,C,E,E,E,G,C,G,G,E,I,C,G,G,Q,C,E,E,I,C,E,E,C,M,E,C,E,C,E,E,C,E,C,Q,C,E,E,C,C,G,A,E,C,C,E,C,M,C,C,E,C,M,C,M,C,C,E,C,C,C,E,C,K,E,K,C,C,C,E,C,E,E,C,C,C,CCYA,IAAM,EAAA,WAAA,EAAN,SAAA,CAAA,GAAM,A,S,C,C,C,E,G,A,Y,O,G,A,O,E,M,A,U,qD,C,E,S,C,O,M,C,G,E,S,C,C,Y,C,M,E,S,C,E,a,C,C,C,G,G,E,E,E,EAAA,EAAA,GAAA,I,E,E,EAAA,G,E,I,W,I,E,E,EAAA,G,O,E,E,Q,S,C,E,U,E,I,E,W,E,E,K,C,I,C,W,A,A,G,C,A,U,C,A,G,A,a,O,Q,A,E,W,G,O,S,O,C,G,A,Y,O,C,E,E,AADL,SAAA,CAAA,E,G,A,K,I,E,M,A,e,6D,O,C,E,I,C,GACK,SAAA,I,OAAA,A,S,C,C,C,E,G,C,C,a,C,E,M,A,U,oC,EAAA,IAAA,CAAA,G,E,K,C,I,C,U,CAAA,O,EAAA,C,CACF,IAAA,oBAAA,MAAA,W,I,E,I,AACI,CAAA,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,YAAY,CAAC,WAEjC,IAAI,EAAY,IAAI,CAAC,aAAa,CAAC,gBAuBnC,GArBA,IAAI,CAAC,SAAS,CAAG,GAAc,EAAU,WAAW,CAAC,IAAI,IAAO,IAAI,CAAC,YAAY,CAAC,cAAgB,OAElG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,UAAY,GAO9C,IAAI,CAAC,KAAK,CAAC,eAAe,GAC7B,IAAI,CAAC,KAAK,CAAC,eAAe,CAAI,+BAA2C,MAAA,CAAb,IAAI,CAAC,OAAO,CAAC,oBACzE,IAAI,CAAC,kBAAkB,IAIpB,IAED,AADA,CAAA,EAAY,SAAS,aAAa,CAAC,SAAnC,EACU,IAAI,CAAG,SACjB,EAAU,SAAS,CAAC,GAAG,CAAC,eACxB,IAAI,CAAC,MAAM,CAAC,IAEZ,CAAC,EAAU,WAAW,CAAE,CACxB,IAAM,EAAiB,SAAS,aAAa,CAAC,OAC9C,CAAA,EAAe,SAAS,CAAG,sBAC3B,EAAe,WAAW,CAAG,IAAI,CAAC,SAAS,CAC3C,EAAU,MAAM,CAAC,EACrB,CAEA,IAAI,CAAC,iBAAiB,GAGI,MAAvB,EAAU,QAAQ,GACjB,EAAU,eAAe,CAAC,QAC1B,EAAU,YAAY,CAAC,WAAY,KACnC,EAAU,YAAY,CAAC,OAAQ,UAE/B,EAAU,gBAAgB,CAAC,UAAW,SAAA,CAAtC,EACQ,CAAA,AAAU,UAAV,EAAE,GAAG,EAAgB,AAAU,MAAV,EAAE,GAAG,AAAK,IAC/B,EAAE,cAAc,GAChB,EAAK,QAAQ,GAErB,IAIJ,IAAI,CAAC,gBAAgB,CAAC,cAAe,EAAY,eAAe,CAAE,CAAC,KAAM,CAAA,CAAI,GAC7E,IAAI,CAAC,gBAAgB,CAAC,UAAW,EAAY,eAAe,CAAE,CAAC,KAAM,CAAA,CAAI,GAKzE,IAAI,CAAC,gBAAgB,CAAC,QAAS,IAAI,CAAC,QAAQ,EAM5C,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,YAAY,CAAC,WAAa,UAAU,MAAM,CAAC,QAAQ,CAAC,UAAY,UAAU,SAAS,CAAC,QAAQ,CAAC,OACxH,C,E,CAuCA,IAAA,mBAAA,MAAA,W,I,E,I,AACQ,CAAA,OAAO,EAAE,EAAK,OAAO,EAAE,EAAI,OAAO,EAAE,CAAC,MAAM,EAE/C,CAAA,IAAI,CAAC,YAAY,CAAG,IAAI,QAAQ,SAAC,CAAA,CAAK,CAAtC,EACI,IAAI,EAAK,SAAS,aAAa,CAAC,SAChC,CAAA,EAAG,GAAG,CAAG,qCACT,EAAG,KAAK,CAAG,CAAA,EACX,EAAG,MAAM,CAAG,SAAA,CAAZ,EACI,GAAG,KAAK,CAAC,EACb,EACA,EAAG,OAAO,CAAG,EACb,EAAK,MAAM,CAAC,EAChB,EAAA,CACJ,C,E,CAGM,IAAA,cAAN,MAAA,W,I,E,I,CAAA,OAAA,EAAA,W,O,E,I,C,S,C,E,O,E,K,E,K,EACO,GAAC,EAAK,aAAa,CAAnB,MAAA,C,E,E,CACC,MAAA,C,EAAM,EAAK,QAAQ,G,A,M,EAAnB,EAAA,IAAA,G,E,K,C,C,M,EAGJ,MAAA,C,EAAO,EAAK,aAAa,C,A,C,EAC7B,I,C,E,CAEM,IAAA,oBAAN,MAAA,W,I,E,I,CAAA,OAAA,EAAA,WAIU,IAAA,EAGA,E,O,E,I,C,S,C,E,O,E,K,E,K,EALN,OADA,EAAK,gBAAgB,GACrB,C,EAAM,EAAK,YAAY,C,A,M,E,OAAvB,EAAA,IAAA,GAEM,EAAqB,SAAS,aAAa,CAAC,OAClD,EAAK,MAAM,CAAC,GAEN,EAAY,OAAO,WAAW,CAAC,EAAK,SAAS,GAAG,OAAO,IAE7D,EAAK,aAAa,CAAG,IAAI,QAAQ,SAAA,CAAjC,EACI,IAAI,EAAS,IAAI,GAAG,MAAM,CAAC,EAAoB,CAC3C,MAAO,OACP,QAAS,EAAK,OAAO,CACrB,WAAY,EACZ,OAAQ,CACJ,QAAW,SAAA,CAAX,EACI,EAAM,MAAM,CAAC,SAAS,GACtB,EAAQ,EACZ,CACJ,CACJ,EACJ,G,C,E,A,C,EACJ,I,C,E,CAGA,IAAA,oBAAA,MAAA,WACI,IAAM,EAAW,IAAI,CAAC,iBAAiB,GACjC,EAAa,SAAS,aAAa,CAAC,WAE1C,CAAA,EAAW,SAAS,CAAG,EAAS,SAAS,CACzC,IAAI,CAAC,MAAM,CAAC,EAChB,C,E,CAEA,IAAA,YAAA,MAAA,WACI,IAAM,EAAS,IAAI,gBAAgB,IAAI,CAAC,YAAY,CAAC,WAAa,EAAE,EAGpE,OAFA,EAAO,MAAM,CAAC,WAAY,KAC1B,EAAO,MAAM,CAAC,cAAe,KACtB,CACX,C,E,CAEM,IAAA,WAAN,MAAA,W,I,E,I,CAAA,OAAA,EAAA,WAQU,IAAA,E,O,E,I,C,S,C,SAPN,AAAI,EAAK,SAAS,CAAC,QAAQ,CAAC,iBAA5B,C,E,EACA,EAAK,SAAS,CAAC,GAAG,CAAC,iBAEf,EAAK,UAAU,EAAnB,C,EACW,EAAK,iBAAiB,CAAC,EAAK,SAAS,I,EAG1C,EAAW,EAAK,iBAAiB,GACvC,EAAK,MAAM,CAAC,GAGZ,EAAS,KAAK,G,C,E,C,EAClB,I,C,E,CAEA,IAAA,oBAAA,MAAA,WACI,IAAM,EAAW,SAAS,aAAa,CAAC,UAUxC,OATA,EAAS,KAAK,CAAG,IACjB,EAAS,MAAM,CAAG,IAElB,EAAS,KAAK,CAAG,IAAI,CAAC,SAAS,CAC/B,EAAS,KAAK,CAAG,0EACjB,EAAS,eAAe,CAAG,CAAA,EAG3B,EAAS,GAAG,CAAI,0CAA6E,MAAA,CAApC,mBAAmB,IAAI,CAAC,OAAO,EAAE,KAA+B,MAAA,CAA5B,IAAI,CAAC,SAAS,GAAG,QAAQ,IAC/G,CACX,C,E,CAUA,IAAA,qBAAA,MAAA,W,I,E,I,CAEI,WAAW,WACP,IAAM,EAAU,+BAA4C,MAAA,CAAb,EAAK,OAAO,CAAC,mBACtD,EAAM,IAAI,KAChB,CAAA,EAAI,aAAa,CAAG,MACpB,EAAI,cAAc,CAAG,SACrB,EAAI,GAAG,CAAG,EACV,EAAI,MAAM,CAAG,SAAA,CAAb,EAIwD,IAA1B,EAAE,MAAM,CAAC,aAAa,EAAU,AAAyB,KAAzB,EAAE,MAAM,CAAC,YAAY,EAG/E,CAAA,EAAK,KAAK,CAAC,eAAe,CAAG,QAAgB,MAAA,CAAR,EAAQ,KAA7C,CACJ,CACJ,EAAG,IACP,C,E,C,E,C,CAzJO,IAAA,cAAP,MAAA,SAAmB,CAAI,CAAE,CAAG,CAAE,CAAE,EAC5B,IAAM,EAAS,SAAS,aAAa,CAAC,OACtC,CAAA,EAAO,GAAG,CAAG,EACb,EAAO,IAAI,CAAG,EACV,GACA,CAAA,EAAO,EAAE,CAAG,CADhB,EAGA,SAAS,IAAI,CAAC,MAAM,CAAC,EACzB,C,E,CAWO,IAAA,kBAAP,MAAA,WACQ,EAAY,YAAY,GAzF9B,EA4Fc,WAAW,CAAC,aAAc,oCA5FxC,EA8Fc,WAAW,CAAC,aAAc,0BA9FxC,EAiGc,WAAW,CAAC,aAAc,uCAjGxC,EAkGc,WAAW,CAAC,aAAc,kCAlGxC,EAoGc,YAAY,CAAG,CAAA,EAC/B,C,E,C,G,E,AArGE,E,S,C,G,G,EAAA,E,GAAA,CAAoB,EAAA,EAAA,cAiO1B,eAAe,MAAM,CAAC,eAAgB","sources":["<anon>","node_modules/lite-youtube-embed/src/lite-yt-embed.js"],"sourcesContent":["/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (üëçüëç)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */ function _assert_this_initialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _construct(Parent, args, Class) {\n    if (_is_native_reflect_construct()) {\n        _construct = Reflect.construct;\n    } else {\n        _construct = function construct(Parent, args, Class) {\n            var a = [\n                null\n            ];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n            if (Class) _set_prototype_of(instance, Class.prototype);\n            return instance;\n        };\n    }\n    return _construct.apply(null, arguments);\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _get_prototype_of(o) {\n    _get_prototype_of = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _get_prototype_of(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _set_prototype_of(subClass, superClass);\n}\nfunction _is_native_function(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _possible_constructor_return(self, call) {\n    if (call && (_type_of(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assert_this_initialized(self);\n}\nfunction _set_prototype_of(o, p) {\n    _set_prototype_of = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _set_prototype_of(o, p);\n}\nfunction _type_of(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nfunction _wrap_native_super(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    _wrap_native_super = function wrapNativeSuper(Class) {\n        if (Class === null || !_is_native_function(Class)) return Class;\n        if (typeof Class !== \"function\") {\n            throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n        function Wrapper() {\n            return _construct(Class, arguments, _get_prototype_of(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, {\n            constructor: {\n                value: Wrapper,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        return _set_prototype_of(Wrapper, Class);\n    };\n    return _wrap_native_super(Class);\n}\nfunction _is_native_reflect_construct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _create_super(Derived) {\n    var hasNativeReflectConstruct = _is_native_reflect_construct();\n    return function _createSuperInternal() {\n        var Super = _get_prototype_of(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _get_prototype_of(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possible_constructor_return(this, result);\n    };\n}\nfunction _ts_generator(thisArg, body) {\n    var f, y, t, g, _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar LiteYTEmbed = /*#__PURE__*/ function(HTMLElement1) {\n    \"use strict\";\n    _inherits(LiteYTEmbed, HTMLElement1);\n    var _super = _create_super(LiteYTEmbed);\n    function LiteYTEmbed() {\n        _class_call_check(this, LiteYTEmbed);\n        return _super.apply(this, arguments);\n    }\n    _create_class(LiteYTEmbed, [\n        {\n            key: \"connectedCallback\",\n            value: function connectedCallback() {\n                var _this = this;\n                this.videoId = this.getAttribute(\"videoid\");\n                var playBtnEl = this.querySelector(\".lty-playbtn\");\n                // A label for the button takes priority over a [playlabel] attribute on the custom-element\n                this.playLabel = playBtnEl && playBtnEl.textContent.trim() || this.getAttribute(\"playlabel\") || \"Play\";\n                this.dataset.title = this.getAttribute(\"title\") || \"\";\n                /**\n         * Lo, the youtube poster image!  (aka the thumbnail, image placeholder, etc)\n         *\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\n         */ if (!this.style.backgroundImage) {\n                    this.style.backgroundImage = 'url(\"https://i.ytimg.com/vi/'.concat(this.videoId, '/hqdefault.jpg\")');\n                    this.upgradePosterImage();\n                }\n                // Set up play button, and its visually hidden label\n                if (!playBtnEl) {\n                    playBtnEl = document.createElement(\"button\");\n                    playBtnEl.type = \"button\";\n                    playBtnEl.classList.add(\"lty-playbtn\");\n                    this.append(playBtnEl);\n                }\n                if (!playBtnEl.textContent) {\n                    var playBtnLabelEl = document.createElement(\"span\");\n                    playBtnLabelEl.className = \"lyt-visually-hidden\";\n                    playBtnLabelEl.textContent = this.playLabel;\n                    playBtnEl.append(playBtnLabelEl);\n                }\n                this.addNoscriptIframe();\n                // for the PE pattern, change anchor's semantics to button\n                if (playBtnEl.nodeName === \"A\") {\n                    playBtnEl.removeAttribute(\"href\");\n                    playBtnEl.setAttribute(\"tabindex\", \"0\");\n                    playBtnEl.setAttribute(\"role\", \"button\");\n                    // fake button needs keyboard help\n                    playBtnEl.addEventListener(\"keydown\", function(e) {\n                        if (e.key === \"Enter\" || e.key === \" \") {\n                            e.preventDefault();\n                            _this.activate();\n                        }\n                    });\n                }\n                // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n                this.addEventListener(\"pointerover\", LiteYTEmbed.warmConnections, {\n                    once: true\n                });\n                this.addEventListener(\"focusin\", LiteYTEmbed.warmConnections, {\n                    once: true\n                });\n                // Once the user clicks, add the real iframe and drop our play button\n                // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n                //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n                this.addEventListener(\"click\", this.activate);\n                // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\n                // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\n                // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\n                // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\n                this.needsYTApi = this.hasAttribute(\"js-api\") || navigator.vendor.includes(\"Apple\") || navigator.userAgent.includes(\"Mobi\");\n            }\n        },\n        {\n            key: \"fetchYTPlayerApi\",\n            value: function fetchYTPlayerApi() {\n                var _this = this;\n                if (window.YT || window.YT && window.YT.Player) return;\n                this.ytApiPromise = new Promise(function(res, rej) {\n                    var el = document.createElement(\"script\");\n                    el.src = \"https://www.youtube.com/iframe_api\";\n                    el.async = true;\n                    el.onload = function(_) {\n                        YT.ready(res);\n                    };\n                    el.onerror = rej;\n                    _this.append(el);\n                });\n            }\n        },\n        {\n            key: \"getYTPlayer\",\n            value: /** Return the YT Player API instance. (Public L-YT-E API) */ function getYTPlayer() {\n                var _this = this;\n                return _async_to_generator(function() {\n                    return _ts_generator(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                if (!!_this.playerPromise) return [\n                                    3,\n                                    2\n                                ];\n                                return [\n                                    4,\n                                    _this.activate()\n                                ];\n                            case 1:\n                                _state.sent();\n                                _state.label = 2;\n                            case 2:\n                                return [\n                                    2,\n                                    _this.playerPromise\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            key: \"addYTPlayerIframe\",\n            value: function addYTPlayerIframe() {\n                var _this = this;\n                return _async_to_generator(function() {\n                    var videoPlaceholderEl, paramsObj;\n                    return _ts_generator(this, function(_state) {\n                        switch(_state.label){\n                            case 0:\n                                _this.fetchYTPlayerApi();\n                                return [\n                                    4,\n                                    _this.ytApiPromise\n                                ];\n                            case 1:\n                                _state.sent();\n                                videoPlaceholderEl = document.createElement(\"div\");\n                                _this.append(videoPlaceholderEl);\n                                paramsObj = Object.fromEntries(_this.getParams().entries());\n                                _this.playerPromise = new Promise(function(resolve) {\n                                    var player = new YT.Player(videoPlaceholderEl, {\n                                        width: \"100%\",\n                                        videoId: _this.videoId,\n                                        playerVars: paramsObj,\n                                        events: {\n                                            \"onReady\": function(event) {\n                                                event.target.playVideo();\n                                                resolve(player);\n                                            }\n                                        }\n                                    });\n                                });\n                                return [\n                                    2\n                                ];\n                        }\n                    });\n                })();\n            }\n        },\n        {\n            // Add the iframe within <noscript> for indexability discoverability. See https://github.com/paulirish/lite-youtube-embed/issues/105\n            key: \"addNoscriptIframe\",\n            value: function addNoscriptIframe() {\n                var iframeEl = this.createBasicIframe();\n                var noscriptEl = document.createElement(\"noscript\");\n                // Appending into noscript isn't equivalant for mysterious reasons: https://html.spec.whatwg.org/multipage/scripting.html#the-noscript-element\n                noscriptEl.innerHTML = iframeEl.outerHTML;\n                this.append(noscriptEl);\n            }\n        },\n        {\n            key: \"getParams\",\n            value: function getParams() {\n                var params = new URLSearchParams(this.getAttribute(\"params\") || []);\n                params.append(\"autoplay\", \"1\");\n                params.append(\"playsinline\", \"1\");\n                return params;\n            }\n        },\n        {\n            key: \"activate\",\n            value: function activate() {\n                var _this = this;\n                return _async_to_generator(function() {\n                    var iframeEl;\n                    return _ts_generator(this, function(_state) {\n                        if (_this.classList.contains(\"lyt-activated\")) return [\n                            2\n                        ];\n                        _this.classList.add(\"lyt-activated\");\n                        if (_this.needsYTApi) return [\n                            2,\n                            _this.addYTPlayerIframe(_this.getParams())\n                        ];\n                        iframeEl = _this.createBasicIframe();\n                        _this.append(iframeEl);\n                        // Set focus for a11y\n                        iframeEl.focus();\n                        return [\n                            2\n                        ];\n                    });\n                })();\n            }\n        },\n        {\n            key: \"createBasicIframe\",\n            value: function createBasicIframe() {\n                var iframeEl = document.createElement(\"iframe\");\n                iframeEl.width = 560;\n                iframeEl.height = 315;\n                // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n                iframeEl.title = this.playLabel;\n                iframeEl.allow = \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\";\n                iframeEl.allowFullscreen = true;\n                // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n                // https://stackoverflow.com/q/64959723/89484\n                iframeEl.src = \"https://www.youtube-nocookie.com/embed/\".concat(encodeURIComponent(this.videoId), \"?\").concat(this.getParams().toString());\n                return iframeEl;\n            }\n        },\n        {\n            /**\n     * In the spirit of the `lowsrc` attribute and progressive JPEGs, we'll upgrade the reliable\n     * poster image to a higher resolution one, if it's available.\n     * Interestingly this sddefault webp is often smaller in filesize, but we will still attempt it second\n     * because getting _an_ image in front of the user if our first priority.\n     *\n     * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md for more details\n     */ key: \"upgradePosterImage\",\n            value: function upgradePosterImage() {\n                var _this = this;\n                // Defer to reduce network contention.\n                setTimeout(function() {\n                    var webpUrl = \"https://i.ytimg.com/vi_webp/\".concat(_this.videoId, \"/sddefault.webp\");\n                    var img = new Image();\n                    img.fetchPriority = \"low\"; // low priority to reduce network contention\n                    img.referrerpolicy = \"origin\"; // Not 100% sure it's needed, but https://github.com/ampproject/amphtml/pull/3940\n                    img.src = webpUrl;\n                    img.onload = function(e) {\n                        // A pretty ugly hack since onerror won't fire on YouTube image 404. This is (probably) due to\n                        // Youtube's style of returning data even with a 404 status. That data is a 120x90 placeholder image.\n                        // ‚Ä¶ per \"annoying yt 404 behavior\" in the .md\n                        var noAvailablePoster = e.target.naturalHeight == 90 && e.target.naturalWidth == 120;\n                        if (noAvailablePoster) return;\n                        _this.style.backgroundImage = 'url(\"'.concat(webpUrl, '\")');\n                    };\n                }, 100);\n            }\n        }\n    ], [\n        {\n            key: \"addPrefetch\",\n            value: /**\n     * Add a <link rel={preload | preconnect} ...> to the head\n     */ function addPrefetch(kind, url, as) {\n                var linkEl = document.createElement(\"link\");\n                linkEl.rel = kind;\n                linkEl.href = url;\n                if (as) linkEl.as = as;\n                document.head.append(linkEl);\n            }\n        },\n        {\n            key: \"warmConnections\",\n            value: /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed's network requests load within its iframe,\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n     */ function warmConnections() {\n                if (LiteYTEmbed.preconnected) return;\n                // The iframe document and most of its subresources come right off youtube.com\n                LiteYTEmbed.addPrefetch(\"preconnect\", \"https://www.youtube-nocookie.com\");\n                // The botguard script is fetched off from google.com\n                LiteYTEmbed.addPrefetch(\"preconnect\", \"https://www.google.com\");\n                // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n                LiteYTEmbed.addPrefetch(\"preconnect\", \"https://googleads.g.doubleclick.net\");\n                LiteYTEmbed.addPrefetch(\"preconnect\", \"https://static.doubleclick.net\");\n                LiteYTEmbed.preconnected = true;\n            }\n        }\n    ]);\n    return LiteYTEmbed;\n}(_wrap_native_super(HTMLElement));\n// Register custom element\ncustomElements.define(\"lite-youtube\", LiteYTEmbed);\n\n//# sourceMappingURL=presentacion.daa4bfa2.js.map\n","/**\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (üëçüëç)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */\nclass LiteYTEmbed extends HTMLElement {\n    connectedCallback() {\n        this.videoId = this.getAttribute('videoid');\n\n        let playBtnEl = this.querySelector('.lty-playbtn');\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\n\n        this.dataset.title = this.getAttribute('title') || \"\";\n\n        /**\n         * Lo, the youtube poster image!  (aka the thumbnail, image placeholder, etc)\n         *\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\n         */\n        if (!this.style.backgroundImage) {\n          this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\n          this.upgradePosterImage();\n        }\n\n        // Set up play button, and its visually hidden label\n        if (!playBtnEl) {\n            playBtnEl = document.createElement('button');\n            playBtnEl.type = 'button';\n            playBtnEl.classList.add('lty-playbtn');\n            this.append(playBtnEl);\n        }\n        if (!playBtnEl.textContent) {\n            const playBtnLabelEl = document.createElement('span');\n            playBtnLabelEl.className = 'lyt-visually-hidden';\n            playBtnLabelEl.textContent = this.playLabel;\n            playBtnEl.append(playBtnLabelEl);\n        }\n\n        this.addNoscriptIframe();\n\n        // for the PE pattern, change anchor's semantics to button\n        if(playBtnEl.nodeName === 'A'){\n            playBtnEl.removeAttribute('href');\n            playBtnEl.setAttribute('tabindex', '0');\n            playBtnEl.setAttribute('role', 'button');\n            // fake button needs keyboard help\n            playBtnEl.addEventListener('keydown', e => {\n                if( e.key === 'Enter' || e.key === ' ' ){\n                    e.preventDefault();\n                    this.activate();\n                }\n            });\n        }\n\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\n        this.addEventListener('focusin', LiteYTEmbed.warmConnections, {once: true});\n\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener('click', this.activate);\n\n        // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\n        // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\n        // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\n        // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\n        this.needsYTApi = this.hasAttribute(\"js-api\") || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\n    }\n\n    /**\n     * Add a <link rel={preload | preconnect} ...> to the head\n     */\n    static addPrefetch(kind, url, as) {\n        const linkEl = document.createElement('link');\n        linkEl.rel = kind;\n        linkEl.href = url;\n        if (as) {\n            linkEl.as = as;\n        }\n        document.head.append(linkEl);\n    }\n\n    /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed's network requests load within its iframe,\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n     */\n    static warmConnections() {\n        if (LiteYTEmbed.preconnected) return;\n\n        // The iframe document and most of its subresources come right off youtube.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\n        // The botguard script is fetched off from google.com\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\n\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\n\n        LiteYTEmbed.preconnected = true;\n    }\n\n    fetchYTPlayerApi() {\n        if (window.YT || (window.YT && window.YT.Player)) return;\n\n        this.ytApiPromise = new Promise((res, rej) => {\n            var el = document.createElement('script');\n            el.src = 'https://www.youtube.com/iframe_api';\n            el.async = true;\n            el.onload = _ => {\n                YT.ready(res);\n            };\n            el.onerror = rej;\n            this.append(el);\n        });\n    }\n\n    /** Return the YT Player API instance. (Public L-YT-E API) */\n    async getYTPlayer() {\n        if(!this.playerPromise) {\n            await this.activate();\n        }\n\n        return this.playerPromise;\n    }\n\n    async addYTPlayerIframe() {\n        this.fetchYTPlayerApi();\n        await this.ytApiPromise;\n\n        const videoPlaceholderEl = document.createElement('div')\n        this.append(videoPlaceholderEl);\n\n        const paramsObj = Object.fromEntries(this.getParams().entries());\n\n        this.playerPromise = new Promise(resolve => {\n            let player = new YT.Player(videoPlaceholderEl, {\n                width: '100%',\n                videoId: this.videoId,\n                playerVars: paramsObj,\n                events: {\n                    'onReady': event => {\n                        event.target.playVideo();\n                        resolve(player);\n                    }\n                }\n            });\n        });\n    }\n\n    // Add the iframe within <noscript> for indexability discoverability. See https://github.com/paulirish/lite-youtube-embed/issues/105\n    addNoscriptIframe() {\n        const iframeEl = this.createBasicIframe();\n        const noscriptEl = document.createElement('noscript');\n        // Appending into noscript isn't equivalant for mysterious reasons: https://html.spec.whatwg.org/multipage/scripting.html#the-noscript-element\n        noscriptEl.innerHTML = iframeEl.outerHTML;\n        this.append(noscriptEl);\n    }\n\n    getParams() {\n        const params = new URLSearchParams(this.getAttribute('params') || []);\n        params.append('autoplay', '1');\n        params.append('playsinline', '1');\n        return params;\n    }\n\n    async activate(){\n        if (this.classList.contains('lyt-activated')) return;\n        this.classList.add('lyt-activated');\n\n        if (this.needsYTApi) {\n            return this.addYTPlayerIframe(this.getParams());\n        }\n\n        const iframeEl = this.createBasicIframe();\n        this.append(iframeEl);\n\n        // Set focus for a11y\n        iframeEl.focus();\n    }\n\n    createBasicIframe(){\n        const iframeEl = document.createElement('iframe');\n        iframeEl.width = 560;\n        iframeEl.height = 315;\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\n        iframeEl.title = this.playLabel;\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\n        iframeEl.allowFullscreen = true;\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\n        // https://stackoverflow.com/q/64959723/89484\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}`;\n        return iframeEl;\n    }\n\n    /**\n     * In the spirit of the `lowsrc` attribute and progressive JPEGs, we'll upgrade the reliable\n     * poster image to a higher resolution one, if it's available.\n     * Interestingly this sddefault webp is often smaller in filesize, but we will still attempt it second\n     * because getting _an_ image in front of the user if our first priority.\n     *\n     * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md for more details\n     */\n    upgradePosterImage() {\n         // Defer to reduce network contention.\n        setTimeout(() => {\n            const webpUrl = `https://i.ytimg.com/vi_webp/${this.videoId}/sddefault.webp`;\n            const img = new Image();\n            img.fetchPriority = 'low'; // low priority to reduce network contention\n            img.referrerpolicy = 'origin'; // Not 100% sure it's needed, but https://github.com/ampproject/amphtml/pull/3940\n            img.src = webpUrl;\n            img.onload = e => {\n                // A pretty ugly hack since onerror won't fire on YouTube image 404. This is (probably) due to\n                // Youtube's style of returning data even with a 404 status. That data is a 120x90 placeholder image.\n                // ‚Ä¶ per \"annoying yt 404 behavior\" in the .md\n                const noAvailablePoster = e.target.naturalHeight == 90 && e.target.naturalWidth == 120;\n                if (noAvailablePoster) return;\n\n                this.style.backgroundImage = `url(\"${webpUrl}\")`;\n            }\n        }, 100);\n    }\n}\n// Register custom element\ncustomElements.define('lite-youtube', LiteYTEmbed);\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_async_to_generator","fn","self","args","arguments","apply","err","undefined","_construct","Parent","Class","_is_native_reflect_construct","Reflect","construct","a","push","instance","Function","bind","_set_prototype_of","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_get_prototype_of","o","setPrototypeOf","getPrototypeOf","__proto__","p","_wrap_native_super","_cache","Map","toString","call","indexOf","TypeError","has","get","set","Wrapper","constructor","create","sham","Proxy","Boolean","valueOf","e","_ts_generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","Symbol","iterator","n","v","step","op","pop","LiteYTEmbed","HTMLElement1","_inherits","subClass","superClass","hasNativeReflectConstruct","protoProps","staticProps","_super","result","Super","_type_of","obj","_assert_this_initialized","ReferenceError","_class_call_check","Constructor","_this","videoId","getAttribute","playBtnEl","querySelector","playLabel","textContent","trim","dataset","title","style","backgroundImage","concat","upgradePosterImage","document","createElement","type","classList","add","append","playBtnLabelEl","className","addNoscriptIframe","nodeName","removeAttribute","setAttribute","addEventListener","preventDefault","activate","warmConnections","once","needsYTApi","hasAttribute","navigator","vendor","includes","userAgent","window","YT","Player","ytApiPromise","res","rej","el","src","async","onload","ready","onerror","_state","playerPromise","videoPlaceholderEl","paramsObj","fetchYTPlayerApi","fromEntries","getParams","entries","player","width","playerVars","events","event","playVideo","iframeEl","createBasicIframe","noscriptEl","innerHTML","outerHTML","params","URLSearchParams","contains","addYTPlayerIframe","focus","height","allow","allowFullscreen","encodeURIComponent","setTimeout","webpUrl","img","Image","fetchPriority","referrerpolicy","naturalHeight","naturalWidth","kind","url","as","linkEl","rel","href","head","preconnected","addPrefetch","HTMLElement","customElements","define"],"version":3,"file":"presentacion.daa4bfa2.js.map"}